type Query {
  agents: [Agent]
  drivers: [Driver]
  groups: [Group]
  history(target: String, source: String): [Message]!
}

type Agent {
  name: String!
  config: AgentConfig!
  driver: Driver!
  status: String!
}

type AgentConfig {
  type: String!
  instructions: String
  description: String
  driver: DriverConfig!
  skills: [String]
}

type DriverConfig {
  type: String!
}

type Driver {
  type: String!
}

type Group {
  name: String!
  members: [String]
}

type Message {
  id: Float
  source: String
  target: String!
  timestamp: String
  content: String!
  type: String!
  status: String!
}

type Mutation {
  sendMessage(message: String!, target: String!, source: String): Message
  createGroup(name: String!): String
  createAgent(name: String!, driver: String!): Agent
}

type Subscription {
  messageCreated: Message
  messageUpdated: Message
  groupCreated: Group
  groupUpdated: Group
  agentCreated: Agent
  agentUpdated: Agent
}